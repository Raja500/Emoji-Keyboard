apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

def localPropertiesFile = rootProject.file("local.properties")
def localProperties = new Properties()
localProperties.load(new FileInputStream(localPropertiesFile))

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.theokanning.emojikeyboard"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 5
        versionName "0.3.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
            keyAlias localProperties['debugKeyAlias']
            keyPassword localProperties['debugKeyPassword']
            storeFile file(localProperties['debugStoreFile'])
            storePassword localProperties['debugStorePassword']
        }
        release {
            keyAlias localProperties['releaseKeyAlias']
            keyPassword localProperties['releaseKeyPassword']
            storeFile file(localProperties['releaseStoreFile'])
            storePassword localProperties['releaseStorePassword']
        }
    }
    defaultConfig {
        buildConfigField "String", "API_KEY", localProperties['api_key']
        manifestPlaceholders = [fabricKey: localProperties['fabric_key']]
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    jcenter()
    google()
    maven { url 'https://maven.fabric.io/public' }
}

ext {
    daggerVersion = '2.12'
    okhttpVersion = '3.9.0'
    retrofitVersion = '2.3.0'
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.wonderkiln:camerakit:0.11.1'
    implementation 'com.vdurmont:emoji-java:3.3.0'

    implementation('com.crashlytics.sdk.android:crashlytics:2.7.0@aar') {
        transitive = true;
    }

    // dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // firebase analytics
    implementation 'com.google.firebase:firebase-core:11.4.2'

    // okhttp
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    testImplementation 'junit:junit:4.12'
    testImplementation('com.nhaarman:mockito-kotlin-kt1.1:1.5.0') {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

apply plugin: 'com.google.gms.google-services'
